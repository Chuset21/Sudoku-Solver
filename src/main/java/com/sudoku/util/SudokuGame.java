package com.sudoku.util;

import com.copy.Copy;

public class SudokuGame {
    //    private final boolean gameState;
    private final byte[][] grid;

    public static final byte GRID_BOUNDARY = 9;

    /**
     * In the future the grid will be generated by an algorithm.
     */
    public SudokuGame() {
        grid = new byte[][]{
                {7, 8, 0, 4, 0, 0, 1, 2, 0},
                {6, 0, 0, 0, 7, 5, 0, 0, 9},
                {0, 0, 0, 6, 0, 1, 0, 7, 8},
                {0, 0, 7, 0, 4, 0, 2, 6, 0},
                {0, 0, 1, 0, 5, 0, 9, 3, 0},
                {9, 0, 4, 0, 6, 0, 0, 0, 5},
                {0, 7, 0, 3, 0, 0, 0, 1, 2},
                {1, 2, 0, 0, 0, 7, 4, 0, 0},
                {0, 4, 9, 2, 0, 6, 0, 0, 7}
        };
//        grid = new byte[GRID_BOUNDARY][GRID_BOUNDARY];
    }

    public byte[][] getCopyOfGrid() {
        return Copy.deepCopy(grid);
    }

    @Override
    public String toString() {
        final StringBuilder sb = new StringBuilder();

        final byte limit = GRID_BOUNDARY - 1;
        for (byte i = 0; i < limit; i++) {

            appendFirstEight(sb, i);

            final byte boardValue = grid[i][limit];
            sb.append(boardValue == 0 ? "?" : boardValue).append('\n');

            if ((i + 1) % 3 == 0) {
                sb.append("- - - - - - - - - - - - - -").append('\n');
            }
        }
        appendFirstEight(sb, limit);

        return sb.append(grid[limit][limit]).toString();
    }

    private void appendFirstEight(StringBuilder sb, byte row) {
        for (byte j = 0; j < 8; j++) {
            final byte boardValue = grid[row][j];
            sb.append(boardValue == 0 ? "?" : boardValue).append((j + 1) % 3 == 0 ? " | " : "  ");
        }
    }

    public static void main(String[] args) {
        final SudokuGame sudokuGame = new SudokuGame();
        System.out.println(sudokuGame);
        System.out.println();

        final byte[][] copy = sudokuGame.getCopyOfGrid();
        copy[0][0] = 78;

        System.out.println(sudokuGame);
    }
}
